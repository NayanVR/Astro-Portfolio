---
import { CategoryType, getCardsData } from "../../utils/workData";
export interface Props {
    sliderName: CategoryType;
}
const { sliderName } = Astro.props;
const cardData = getCardsData(sliderName);
---

<div class="w-full overflow-hidden relative">
    <div class=`${sliderName} min-w-fit flex gap-8 p-4`>
        {
            cardData.map((card, i) => (
                <a
                    href={card.link === "" ? "#" : card.link}
                    class={`group ${
                        i % 2 === 0
                            ? "rotate-3 hover:-rotate-3"
                            : "-rotate-3 hover:rotate-3"
                    } transition-all`}
                >
                    <div class="aspect-video w-80 rounded-lg border-2 border-light p-1 relative overflow-hidden">
                        <img
                            src={`/work/${sliderName}/${card.imgName}`}
                            class="w-full h-full rounded-md object-cover blur-0 group-hover:blur-sm transition-all"
                        />
                        <div class="absolute bottom-0 left-0 w-full h-full px-4 py-2 bg-dark-1 opacity-0 group-hover:opacity-80 transition-all" />
                        <h1 class="absolute w-full px-8 text-lg text-center top-1/2 left-1/2 -translate-x-1/2 translate-y-0 opacity-0 group-hover:-translate-y-1/2 group-hover:opacity-100 transition-all">
                            {card.title}
                        </h1>
                    </div>
                </a>
            ))
        }
    </div>
    <div
        class="absolute pointer-events-none top-0 left-0 h-full w-20 bg-gradient-to-r from-dark to-transparent"
    >
    </div>
    <div
        class="absolute pointer-events-none top-0 right-0 h-full w-20 bg-gradient-to-l from-dark to-transparent"
    >
    </div>
</div>

<script define:vars={{ sliderName }}>
const slides = document.querySelectorAll(`.${sliderName} > a`);
const slider = document.querySelector(`.${sliderName}`);

// Duplicate slides so that the slider can loop
slides.forEach((slide) => {
    slider.appendChild(slide.cloneNode(true));
});

let lastPos = 0;
let repeatPoint = slider.clientWidth / 2;

function animateSlider() {
    slider.style.transform = `translateX(-${lastPos}px)`;
    lastPos = lastPos >= repeatPoint ? 0 : lastPos + 1;
    requestAnimationFrame(animateSlider);
}
animateSlider();
</script>
